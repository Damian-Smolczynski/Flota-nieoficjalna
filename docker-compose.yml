version: '3.8'


services:
  # ===================================================================================
  # MAIN DATABASE
  # ===================================================================================
  mysql:
    image: mysql:latest
    volumes:
      - mysql:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3307
    ports:
      - '3307:3307'
    expose:
      - 3307
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

  # ===================================================================================
  # TEST DATABASE
  # ===================================================================================
  mysql_test:
    image: mysql:latest
    volumes:
      - mysql_test:/var/lib/mysql

    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3308
    ports:
      - '3308:3308'
    expose:
      - 3308
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flota-network

  # ===================================================================================
  # NGINX CONFIGURATION
  # ===================================================================================


  nginx:
    image: nginx:latest
    volumes:
      - ./api-gateway/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - '80:80'
    networks:
      - flota-network
    depends_on:
      - api-gateway

  # ===================================================================================
  # TODO Można robić kilka nginxów, potrzebuję tylko konfiguracji
  # ===================================================================================
#  nginx-cars-service:
#    image: nginx:latest
#    volumes:
#      - ./cars/default.conf:/etc/nginx/conf.d/default.conf
#    ports:
#      - '81:81'
#    networks:
#      - flota-network
#    depends_on:
#      - cars


  # ===================================================================================
  # CARS SERVICE
  # ===================================================================================
  cars:
    build:
      context: ./cars
      dockerfile: Dockerfile

#    TODO Poprawną formą tworzenia kontenera jest ustawianie bind mounta na folder serwisu i kopiowanie po staremu
    command: gunicorn --bind 0.0.0.0:8001 --workers 6 'app.create_app:main()' --reload

    volumes:
      - ./cars:/webapp

    depends_on:
      mysql:
        condition: service_healthy
      mysql_test:
        condition: service_healthy
    ports:
      - "8001:8001"
    networks:
      flota-network:
        aliases:
          - cars-service

  # ===================================================================================
  # API-GATEWAY
  # ===================================================================================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8000 --workers 6 'app.create_app:main()' --reload

    volumes:
      - ./api-gateway:/webapp
      - ./migrations:/migrations
      #  TODO 5/6 czy dobrze rozwiązuję sprawę migracji - mając już bind mounta, wywołuję docker exec
    depends_on:
      mysql:
        condition: service_healthy
      mysql_test:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      flota-network:
        aliases:
          - api-gateway-service


  # TODO Nie warto dokeryzować frontendu - zarchiwizować wiedzę i usunąć stąd
#    https://www.youtube.com/watch?v=QePBbG5MoKk
#  frontend:
#    build:
#      context:  ./frontend
#    command: npm start
#
#    depends_on:
#      mysql:
#        condition: service_healthy
#      mysql_test:
#        condition: service_healthy
#    ports:
#      - "3000:3000"
#    stdin_open: true
#    tty: true
#    networks:
#      flota-network:
  # TODO Migracje powinny być robione przez developera poprzez docker exec
#  alembic:
#    build:
#      context: ./migrations
#    depends_on:
#      mysql:
#        condition: service_healthy
#      mysql_test:
#        condition: service_healthy
#    ports:
#      - "4000:4000"
volumes:
  mysql:
  mysql_test:

networks:
  flota-network:
